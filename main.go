package main

import (
	"bufio"
	"fmt"
	"os"
	"sort"
	"strings"
)

const stringTest = "ATGGAGAAAATAGTRCTTCTTCTTGCAATAGTCAGTCTTGTTAAAAGTGATCAGATTTGCATTGGTTACCATGCAAACAATTCAACAGAGCAGGTTGACACAATCATGGAAAAGAACGTTACTGTTACACATGCCCAAGACATACTGGAAAAGACACACAACGGGAAGCTCTGCGATCTAGATGGAGTGAAGCCTCTAATTTTAAGAGATTGTAGTGTAGCTGGATGGCTCCTCGGGAACCCAATGTGTGACGAATTCATCAATGTACCGGAATGGTCTTACATAGTGGAGAAGGCCAATCCAACCAATGACCTCTGTTACCCAGGGAGTTTCAACGACTATGAAGAACTGAAACATCTATTGAGCAGAATAAACCATTTTGAGAAAATTCAAATCATCCCCAAAAGTTCTTGGTCCGATCATGAAGCCTCATCAGGAGTGAGCTCAGCATGTCCATACCTGGGAAGTCCCTCCTTTTTTAGAAATGTGGTATGGCTTATCAAAAAGAACAGTACATACCCAACAATAAAGAAAAGCTACAATAATACCAACCAAGAAGATCTTTTGGTACTGTGGGGAATTCACCATCCTAATGATGCGGCAGAGCAGACAAGGCTATATCAAAACCCAACCACCTATATTTCCATTGGGACATCAACACTAAACCAGAGATTGGTACCAAAAATAGCTACTAGATCCAAAGTAAACGGGCAAAGTGGAAGGATGGAGTTCTTCTGGGCAATTTTAAAACCTAATGATGCAATCAACTTCGAGAGTAATGGAAATTTCATTGCTCCAGAATATGCATACAAAATTGTCAAGAAAGGGGACTCAGCAATTATGAAAAGTGAATTGGAATATGGTAACTGCAACACCAAGTGTCAAACTCCAATGGGGGCGATAAACTCTAGTATGCCATTCCACAACATACACCCTCTCACCATCGGGGAATGCCCCAAATATGTGAAATCAAACAGATTAGTCCTTGCAACAGGGCTCAGAAATAGCCCTCAAAGAGAGAGCAGAAGAAAAAAGAGAGGACTATTTGGAGCTATAGCAGGTTTTATAGAGGGAGGATGGCAGGGAATGGTAGATGGCTGGTATGGGTACCACCATAGCAATGAGCAGGGGAGTGGGTACGCTGCAGACAAAGAATCCACTCAAAAGGCAATAGATGGAGTCACCAATAAGGTCAACTCAATTATTGACAAAATGAACACTCAGTTTGAGGCTGTTGGAAGGGAATTTAATAACTTAGAAAGGAGAATAGAGAATTTAAACAAGAAGATGGAAGACGGGTTTCTAGATGTTTGGACTTATAATGCCGAACTTCTGGTTCTCATGGAAAATGAGAGAACTCTAGACTTTCATGACTCAAATGTTAAGAACCTCTACGACAAGGTCCGACTACAGCTTAGGGATAATGCAAAAGAGCTGGGTAACGGTTGTTTCGAGTTCTATCACAAATGTGATAATGAATGTATGGAAAGTATAAGAAACGGAACGTACAACTATCCGCAGTATTCAGAAGAAGCAAGATTAAAAAGAGAGGAAATAAGTGGGGTAAAATTGGAATCAATAGGAACTTACCAAATACTGTCAATTTATTCAACAGTAGCGAGTTCCCTAGCACTGGCAATCATGATAGCTGGTCTATCTTTATGGATGTGCTCCAATGGATCGTTACAATGCAGAATTTGCATTTAA"

type stringPart struct {
	pos string
	str string
}

type stringParts []*stringPart

func (a stringParts) Len() int           { return len(a) }
func (a stringParts) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }
func (a stringParts) Less(i, j int) bool { return len(a[i].str) > len(a[j].str) }

func main() {
	file, err := os.Open("samples.txt")
	if err != nil {
		panic(err)
	}

	scanner := bufio.NewScanner(file)

	var contains stringParts
	var prefixes stringParts

	for scanner.Scan() {
		parts := strings.Split(scanner.Text(), ",")

		if strings.Contains(stringTest, parts[1]) {
			contains = append(contains, &stringPart{
				pos: parts[0],
				str: parts[1],
			})
		}

		if strings.HasPrefix(stringTest, parts[1]) {
			prefixes = append(prefixes, &stringPart{
				pos: parts[0],
				str: parts[1],
			})
		}
	}

	sort.Sort(prefixes)
	sort.Sort(contains)

	for i := range prefixes {
		if prefix, position := findTarget(prefixes[i].str, prefixes[i].pos, contains); prefix != "" {
			fmt.Println(position)
			break
		}
	}
}

// TODO: добавить кэш для предыдущих вычислений

func findTarget(oldPrefix, oldPosition string, contains stringParts) (string, string) {
	for i := range contains {
		newPrefix := oldPrefix + contains[i].str
		newPosition := oldPosition + "," + contains[i].pos

		if newPrefix == stringTest {
			return newPrefix, newPosition
		}

		if strings.HasPrefix(stringTest, newPrefix) {
			if prefix, position := findTarget(newPrefix, newPosition, contains); prefix != "" {
				return prefix, position
			}
		}
	}

	return "", ""
}
